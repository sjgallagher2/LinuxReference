Version control, i.e. keeping track of how software changes over time, is an important aspect of software. In
fact, version control has gone beyond "helpful" into "mandatory" territory. Git is perhaps the most common
version control tool, with other options including subversion (SVN), mercurial, and more. Let's stick with git. 

At its core, git is software which manages several versions of files and projects, allowing you to return to a
previous state, or "tag" the software at a point with a version number, and even release the software as a tar
ball. Websites such as Github and Bitbucket allow you to manage a remote repository, forking other peoples repos
and managing your own from online or locally. 

All that being said, let's look at good git practices. After all, it's not every day you have to work with
software that has the ability to "undo" months or years of work if used (very) incorrectly. 

Git is used to do the following core operations:
	Create a new repo, or clone a repo from a remote source
	Stage changes to files and commit them with a message, return to previous commits
	Tag a state of the project, return to previous tags
	Review differences between versions of files
	Push changes to a remote repo, pull changes from a remote repo
	Make a new branch and visit other branches of the repo
	Merge branches, tags, or remote repositories with the local repo
	Release software as a tar ball

One git notation is worth pointing out:
	--		A double-dash separates the commands/branches/etc from filenames. This is
			necessary for when you have e.g. a file called master, where 
				$ git checkout master
			Will checkout the master branch, but 
				$ git checkout -- master
			Will check out the file called master.


The following commands are commonly used in git:
	git init 			git remote
	git push 			git pull
	git clone 			git add
	git commit 			git branch
	git checkout 		git reset
	git revert 			git diff
	git status 			git log
	git tag 			git merge
	git ls-tree 		git mv
	git rm 				git clean

=========================
===== GIT COMMANDS ======
=========================
Understanding git really means understanding its commands and syntax. There are 20 commands listed above, and we're
going to cover each one. In total, there are about 160 commands, including variations on the above (e.g. merge,
merge-base, merge-file, merge-index, etc...) and some less common commands (I've never used cherry or bisect or
quiltimport, for example) as well as web-related and gui-related commands (for Windows Git). 

git init		Creates a new .git folder and initializes the current directory as a git repo. Safe to run in
				existing repos.
git remote		Git remote helps manage different tracked remote repositories. A tracked repo is one where you
				can push or pull to/from it, across https or ssh. You can add, rename, remove, set-head,
				set-branches, get-url, set-url, show, prune, and update. With no arguments, it lists existing
				remotes. 
git clone		Clone a repository to a directory
git add			Stage files that have been modified. Must be done before committing. 
git commit		Commit changes to git
git branch		Manage branches
git checkout	Update files in working tree to match specified version/index/tree
git status		Show status of working tree relative to previous commits
git log			Show log of commits
git reset		Reset current HEAD to specified state
git revert		Undo previous commits with new commits undoing the changes

=========================
==== GETTING STARTED ====
=========================
If you have a new software project, go to the root directory of the project and use
	$ git init
This will create a .git folder which will be used to manage everything. Git commands can now be used in any
subdirectory of the project root. No other changes will be seen. If there's no .git folder in any root dir, a
git command will simply complain. To add your project to github, make a new empty repository on github, commit
your latest changes, and add the github repository as the remote "origin" (even though it's not actually the
origin). 
	$ git remote add origin https:// ...
And push
	$ git push origin master
More on this later. 

If you want to clone a repository from e.g. github, go to somewhere you want the repo to be and use
	$ git clone https://www...
Or ssh:// if you use ssh. A directory for the project should now be created. In this case, the location you
pulled the repository from becomes the "origin" for the project. You can then use commands such as
	$ git pull origin master
To pull in changes from the [master] branch of the origin, the remote repo you cloned. 

If the repository you cloned was, itself, a fork of another, it is said to be "downstream", and the upstream is
the repository that was forked from. So if you're on Github and you fork a repo, then clone your fork to your 
local computer, your github fork becomes the origin, and the original repo becomes the upstream. 

========================
==== MAKING CHANGES ====
========================
Your project always consists of the files that are local on your computer. However, git stores the state of the
project when you -commit- your changes, so you can revisit that point later. When you commit, only the files that
you specify to save, files that have been -staged-, will actually be stored. When you commit, you commit to the
branch you're working on, not anything else. 

When you commit your changes, every file that was recorded becomes -tracked-. You can review the changes to 
tracked files using git diff, relative to the last commit. 

Staging files is done with
	$ git add filename.txt
For a single file, or
	$ git add --all
For all local changes. You could similarly use
	$ git add .
For all files in the local directory (not sure about subdirectories). Do this before you commit, especially when
you've created new files. Having staged and unstaged changes is a powerful tool for git, because it allows you
to, say, revert to a previous commit, with all activity after that being unstaged changes that you can erase. 

To get to some point in your history, you can use git checkout, git reset, or git revert. These are all used
differently: git reset will move HEAD to a previous point, and you have the choice of whether or not to
keep the working tree as-is or to overwrite everything; git revert always allows you to go back to
previous commits, because it simply adds new commits that undo them; git checkout is more generally used
to update the files in your working tree to match a previous state, and to move HEAD around (and possibly
detach it). 

If you want to discard local changes for a particular file to the way they
were before you committed, you can checkout that file (see below). 
	$ git checkout -- <filename>
These changes are gone, no going back. To discard all you local staged and unstaged changes i.e. to revert to the 
last commit, use
	$ git reset --hard HEAD 
Note: The HEAD is an important aspect of git, which we'll get to later. 
You can do this for only a particular file as well:
	$ git reset --hard HEAD filename.txt

Git reset generally will undo changes, but keeps the files as they are on your computer, so the commits are 
undone but nothing else changes. By specifying --hard, git reset will undo the commits and revert all the files 
to their state in the specified commit. It changes HEAD but does not change the index (staging area, see below). 
Git reset without --hard is essentially the opposite of git add. 

Git-checkout in general changes the current working tree to match a previous state. 
	$ git checkout HEAD		Change working tree to match previous commit
	$ git checkout -- .		Change working tree to match index (undo unstaged changes only)
Because it changes the working tree, these changes are final. 

For transparency, you can revert to a previous commit (by producing a new commit which changes everything 
back) using
	$ git revert mycommit
And this way no work is lost if you decide you didn't want to totally revert all the changes. 
One final way of getting back to the latest commit is with 
	$ git stash
This is reset your working tree to the most recent commit, but it will stash away local changes so they're not
gone forever, and it does it in a clean way (no other commits or unstaged changes when it's done).

See more information on moving between commits and branches below, and below that for more on undoing. 

If a file was tracked, you can use git diff, as I mentioned before, to see how it has changed since the last 
commit. 
	$ git diff filename.txt
More generally, you can look at the -status- of e.g. a commit, which shows everything that changed in that
commit. This shows all the changes in the most recent commit:
	$ git status
You can also look at the staged changes in the repository with git diff:
	$ git diff --staged
And finally you can commit your changes as a new commit in your git with
	$ git commit
Which should include a message, usually:
	$ git commit -m "Brief commit summary..."
Quotes included. You can commit all local changes to all tracked files using
	$ git commit -a
To view the changes after a commit, you can use git show. It defaults to HEAD (see below), the most recent commit
on the current branch. 
	$ git show
More on git diff and git show later. 

It is very good practice to commit often. But do not commit unfinished code, that's bad practice. Commit every
chance you have a logical "break point" where some part of the code is written. If you make a mistake with the 
commit, you can amend it. For example, if you noticed a typo, and quickly change it, and don't want to make a new
commit just for that typo. 
	$ git commit --amend
Along with any other options you would use. 

The commits you make are stored in a "log", which can be accessed with:
	$ git log
For the whole log, or
	$ git log -N
Where N is a number indicating the number of commits to show. You'll see the last N commits in the log. You can
show changes for a specific file over the different commits using the log, with
	$ git log -p filename.txt
Or to see the entire history of the file,
	$ git log --follow -p -- filename.txt
Note the two dashes in between the p flag and the filename. You can see who changed what and when (particularly 
helpful when working in teams) using git blame.
	$ git blame filename.txt
Despite the harsh-sounding name, blaming is an essential part of working in teams. 

A project isn't all about adding files and changes however, sometimes you need to delete a file or clear the
unstaged or even the staged changes. Maybe you only care about the files that are being tracked, and you want
to delete the ones left over. 

You can remove unfollowed files in the tree with git clean. You can review the cleaning with:
	$ git clean -n
Where the -n option means dry-run. Then you remove by force:
	$ git clean -f
You can remove files and directories:
	$ git clean -f -d
And you can remove unfollowed files as well as files in your .gitignore with -x:
	$ git clean -f -x
There is also an interactive mode to interactively clean out untracked files. 

When you delete a file, a copy of it will still be expected by git, and the old version will be kept when it
isn't staged. So you need to stage its remove with:
	$ git rm filename.txt
If you only want to remove the file from staging and tracking, you can do that with
	$ git rm --cached filename.txt
And you'll be set. If you change a file's name, you have to stage a move for git:
	$ git mv oldname.txt newname.txt
And this way git will know that it's the same file, where it is, and that its name has changed. 

Finally, there is a way to list all the files currently being tracked, with ls-tree. 
	$ git ls-tree -r HEAD --name-only
Which will list the files tracked for HEAD, and
	$ git ls-tree -r master --name-only
Specifically to see files tracked for master. 

===============================
====== BRANCHES AND TAGS ======
===============================
Branches and tags make the git go round. The master branch is your "official" branch in your repo, the one which
has up to date, preferably working code. You can make new branches, each with its own commits and everything,
and jump around to different branches, merging things together. Each branch should be used to implement a new
feature, or make sweeping changes to files. Once all the changes are done, you can (carefully) merge those
changes into the master branch. 

Using
	$ git branch
Will display the branches you have, and the one you're using will have an asterix (*) next to it. You can make
a new branch with:
	$ git branch branchname
And you can check out a branch (use that branch in your local directory) with:
	$ git checkout branchname
Better yet, you can create a new branch and check it out with
	$ git checkout -b branchname
And when you're done with a branch, you can delete it with:
	$ git branch -d branchname

A commit is typically referred to by its SHA value, like 689b35adbfc88b2bb2f55f52cbf3dcb48102a513. This is
automatically generated. It isn't very useful to refer to commits like this, especially when versioning is
involved, so instead we tag commits with a symbolic name.
	$ git tag v1.2			Create a tag for this commit called v1.2
	$ git tag -l			List tags
	$ git tag -d v1.2		Delete tag v1.2
	$ git tag v1.3 689b35adbfc88b2bb2f55f52cbf3dcb48102a513			Tag commit 689b... with v1.3

Tags don't have to just be names either. They can have annotations, in which case they are called tag objects.
Tag objects can be unsigned or signed with a user key. 

The git HEAD is a very useful concept. HEAD is a pointer to the current branch, at the most recent commit. When
you git checkout, you really just move HEAD. Wherever HEAD is, your local directory will reflect that branch. If
you move HEAD to a specific commit in a branch, it is called detached. Note that the most recent commit in a
branch is often called the "tip", although this isn't a command or argument. An example:

	$ git checkout branchname		Set HEAD to the tip of branchname
	$ git checkout master			Set HEAD to the tip of master
	$ git checkout tagname			Detach HEAD, point to the commit tagged "tagname"
	$ git commit -a					From the detached HEAD, make a new commit. This is "in parallel" to other
									commits, it doesn't overwrite anything. These commits will be deleted by git 
									if not referenced
	$ git branch newbranch			From detached HEAD, make a branch from the detached commits, saves detached
									commits from deletion, because newbranch references them
	$ git checkout newbranch		From anywhere, HEAD is no longer detached, and points to the tip of
									newbranch
	$ git checkout master			Go back home to the tip of master

While HEAD points to the most recent commit of a branch, you can access the commit before that with HEAD^, and
the commit before that with HEAD^^, and so on. This is useful for diffs. 


When you've made changes to a branch relative to the master branch, you'll probably want to merge those changes
into master. To do that, it's good practice to first merge master into the branch, then merge the branch into
master. Effectively, you're changing your branch first, using it to resolve any issues with the merge, then
using that to merge effectively into the master branch. 

From the branch:
	$ git merge master
Then resolve any issues and try merging again. Then from master:
	$ git merge branchname
Which shouldn't have any issues. 

It's best practice not to have any uncommitted changes when merging. If you try to merge and it comes up with
conflicts, use
	$ git merge --abort
This will reconstruct the pre-merge state of things. You can also use
	$ git merge --continue
To force your way through the merge, conflicts-be-damned. 

There's a -lot- to be said about merging, because obviously the idea of merges and conflicts and unfinished
states is worrisome when irreplaceable work is concerned. Read the man page for git merge, it has a great amount
of information on the topic of merging and best practices. 

=========================================
==== GIT TREES AND HEADS AND INDICES ====
=========================================
Above we introduced the HEAD pointer. We mentioned things like the working tree and the index. Let's clear things
up with all these different and seemingly similar concepts. 
	Directories
		Working tree (previously called the working directory)
		Git directory/repository
	Branches
		Master
		HEAD - Local HEAD, remote HEAD, detached HEAD
		Origin
	Data items
		Index (often called the staging area, or cache)
		Tree
		Blob
		Snapshot
A file can be changed, staged, or committed. The working tree is where you work (with your changed files, staged
or unstaged, committed or not). It is your files as-they-are, while you're working. The index is the
file-representation of the staging area. When you stage files, you are "adding them to the index". The git
repository stores the entirety of your project history. 

The index, staging area, stage, and cache are all the same thing. 

The master branch is the main branch of your project, the HEAD is a pointer to the tip of a branch (see above) 
where you're working, the origin is the remote repository. Origin is the default name given to a remote repository 
you push to and pull from. 

Data is stored in compressed files called blobs. A blob is associated with a particular file, a tree is associated 
with a particular directory of files. A commit is saved as a "snapshot" of your project. The index saves a 
snapshot of your working directory for staged changes, then this is saved during a commit. Snapshot is a common
term, not necessarily a formal one. 


=============================
========= GIT DIFF ==========
=============================
Understanding the output of a diff command in Unix (and here, specifically, git) is endlessly useful. There are 
three ways of running a diff. The first is the plain, computer-language one:
	$ diff file1.txt file2.txt
The more useful ways are context mode and unified mode. 
	$ diff -c file1.txt file2.txt		Context mode
	$ diff -u file1.txt file2.txt		Unified mode		<- Default git mode, git diff assumes unified mode

It would help to have some example files to use to distinguish these types of outputs. Consider files text1.txt 
and text2.txt. Line numbers are added (they aren't in the actual text files).

<file text1.txt>
1		line1
2		line2
3		line3
</file>

<file text2.txt>
1		line2
2		line3
3		newline
</file>

Diff generally tells you what files you're looking at (assume an original and a revision), how long they are, and 
where changes occur. To tell you where changes occur, it shows the 'context', starting at some line and showing a 
number of lines following. The starting line and number of lines are listed.

Without further ado, here are the types of diff (for Windows in Cmder). Plain:
	$ diff [--color] text1.txt text2.txt 
	
1d0
< line1
3a3
> newline

Here, the output is a bit ugly. Each line change is listed individually (instead of showing context). 1d0 means
the first file's line 1 is deleted (d) and would have appeared at the second file's line 0. For several lines, a
comma separated range is given, like 15,20 (lines 15 to 20). Lines can be added (a), deleted (d), or changed (c). 
We also have context mode, which shows some more lines (default 3) above and below the common lines:
	$ diff -c [--color] text1.txt text2.txt
	
*** text1.txt   Mon Mar 11 14:14:15 2019
--- text2.txt   Mon Mar 11 14:14:15 2019
***************
*** 1,3 ****
- line1
  line2
  line3
--- 1,3 ----
  line2
  line3
+ newline

Here, the files are listed, with time stamps. The first (original) file is indicated with "***" and the second
(new) file is indicated with "---". The 1,3 is the range for the changes/context: starting at line 1, ending at
line 3. A "-" in the context sequence means line is deleted, a "+" means added, "!" means a change.  In unified 
mode, the two files are combined into their longest common sequence, to give a "unified" appearance:
	$ diff -u [--color] text1.txt text2.txt
	
--- text1.txt   2019-03-11 14:14:15.778858300 -0400
+++ text2.txt   2019-03-11 14:14:15.262058300 -0400
@@ -1,3 +1,3 @@
-line1
 line2
 line3
+newline

This starts with a header, describing the files being looked at. --- means first/original file, +++ means 
second/revised file. The time stamps are included for each. After the header, we have a context, which makes up 
the rest of the output. The context starts with @@ -1,3 +1,3 @@, which is in the format @@ -<line start A>,<number 
of lines A> +<line start B>,<number of lines B>. These describe the context start line (1 in both cases) and the 
number of lines shown (3 in both cases). As above, the minus (-) sign is not a negative, it just means the first
file, and the plus means the second. An example, @@ -35,12 +31,11 @@ means the first file starts at line 35 and 
is 12 lines long, and the second starts at line 31 and is 11 lines long. 

The file itself has a "-" for text that was deleted (text only in the first file), and a "+" for text that was 
added (text only in the second).  Note how it picks up on the fact that both have line2 and line3, and used those 
to align the files. This is called alignment. The output is a combined version of the two files.

For git-diff, which is essentially unified mode with git-particulars included:
	$ git diff text1.txt text2.txt
	
diff --git a/text1.txt b/text2.txt
index 83db48f..8491237 100644
--- a/text1.txt
+++ b/text2.txt
@@ -1,3 +1,3 @@
-line1
 line2
 line3
+newline

We see that this is unified mode, it just runs the diff command with the --git flag to show the commit
information. 

About alignment - Diff is based on the longest common subsequence problem. Given the two files, it finds the
longest string of common characters/lines common to both files. Changes (insertions or deletions) are listed in
between common elements. The best source of information and examples for the diff utility is Wikipedia, because 
the man page only lists options, and the info page is slightly better but still assumes a lot of prior knowledge. 

Viewing changes between commits, branches, staged changes, etc is always useful. For this purpose, one can use:
	git diff		Difference between files
	git status		Staged changes since last commit
	git show		Shows last commit with its associated changes (by default)
Git show defaults to a git-log type behavior, but instead of only showing commit information (who made the
commit, when, the SHA, etc) like git log, git show also displays all the changes made for that commit. 

These commands can work in many different ways, and the man pages are the proper reference. Git diff will
typically compare your working tree to whatever you specify. You specify a commit with its tag or its SHA-1 name,
either the full name or only enough characters to be unique. For example, 
476d264fd7fff4394c63c5af42e2e76496fcf6d0 and 476d264 are both valid, as long as no other SHA-1 starts with
476d264. 

Some examples are in order, though they are not substitutes for the man pages. 
	$ git diff				Difference between working tree and index (shows unstaged changes)
	$ git diff --cached		Difference between index and previous commit
	$ git diff --staged		Same as --cached
	$ git diff HEAD			Difference between working tree and last commit (shows all changes, staged and
							unstaged)
	$ git diff otherbranch	Difference between working tree and tip of otherbranch
	$ git diff HEAD -- afile	Difference between afile in working tree and in previous commit
	$ git diff HEAD^ HEAD	Difference between second latest commit and latest commit
	$ git diff master otherbranch	Difference between tip of master and otherbranch
	$ git diff master..otherbranch	Same as above
	$ git diff master...otherbranch	Changes in master since otherbranch was branched from it

If you want to see the diff between files that changed names, or exist in different branches with different
names, or just the diff between different files in different commits, it's all possible. 
	$ git diff branch1:filename1.txt branch2:filename2.txt
	$ git diff commit1:filename1.txt commit2:filename2.txt

Friendlier outputs/summaries:
	$ git diff --stat		Create a histogram showing insertions, deletions
	$ git diff --name-status	Only show names and changes, not diff output

This last option, --name-status, will list the files, with letters according to the following list:
	A	addition
	C	copy (followed by a percentage of similarity between original and renamed versions)
	D	deletion
	M	modification
	R	renaming (followed by a percentage of similarity between original and renamed versions)
	T	change type
	U	unmerged (need to finish the merge)
	X	unknown (likely a bug)

Note that git-show will perform a diff as well as showing commit information. It shows the changes that occurred
during the specified commit. 

In addition to basic git diffs, there are "raw output" diffs, including git-diff-index, git-diff-tree, and
git-diff-files. These show raw (computer-friendly), and provide a speed boost, but otherwise aren't too different
from standard git-diff. 


===========================
========= UNDO ============
===========================
The commands useful for 'undo' in git are:
	git reset		Undo local changes, staging
	git revert		Undo changes publicly (with commits)
	git checkout	Force change of working tree
	git stash		Store current state during risky manouevers

Git-reset is the safest way to undo git-related actions, because you have to explicitly tell it whether or not to
change the working tree and the index. Really, git-reset moves the HEAD to a given commit, and it may or may not
update your working tree and index to match. The five modes are:
	$ git reset --soft		Reset the HEAD only, doesn't change the working tree or index
	$ git reset --mixed		Reset the HEAD and change the index to match (unstage changes), working tree is
							untouched. Default behavior.
	$ git reset --hard		Reset the HEAD, change index and working tree to match.
	$ git reset --merge		Resets HEAD, changes the index, updates files different between the commit and HEAD,
							but keeps any unstaged changes. Aborts if a file is different and staged. 
	$ git reset --keep		Reset HEAD, change index, update files that are different. 

Some examples:
	$ git reset --soft oldcommit	Reset HEAD to oldcommit, but otherwise don't change anything
	$ git reset						Reset the index to match previous commit, don't change any files
	$ git reset --soft HEAD^		Go back to previous commit, keep files. Useful for fixing an incomplete
									commit.
	$ git reset --hard HEAD~3		Update working tree and index to match third previous commit. No going back.
	$ git reset --hard				Clean index and working tree to match most recent commit

After a git-reset, the original head is stored by git as ORIG_HEAD. So for example, if you made a mistake in the
most recent commit, you can do a soft reset, then re-commit using the original head meta-data. 
	$ git reset --soft HEAD^
	$ git commit -a -C ORIG_HEAD	Commit all changes using the message from the original commit

Note that when resetting, the HEAD is not detached. After resetting, previous commits are removed from the
branch. You can still recover them, however, using the git reference log (reflog), or (for git reset HEAD~)
simply using ORIG_HEAD. This is equivalent to HEAD@{1}, and to go further back, you can use HEAD@{2}, HEAD@{3},
etc. 

Note that there's no way for git to reset the working tree changes without changing the index. This is necessary
to e.g. undo unstaged changes. For changes to the working tree, we need to use git-checkout. 

Git-checkout applies to files, branches, and commits. In general, checking out will update a specified file to a
previous version. This can be from the index, from the most recent commit, from a separate branch, from older
commits, etc. If a particular file is specified, HEAD doesn't change. If no files or paths are specified, HEAD is
moved to wherever you checked out.

	$ git checkout oldcommit -- localfile	Replace localfile with the version from oldcommit
	$ git checkout stagedfile				Replace stagedfile with the version in the index (unstaged changes
											are removed, staged changes are safe)
	$ git checkout .						Update working tree from the index (unstaged changes are removed,
											staged changes are safe)


==============================
==== DISPLAYING GIT ITEMS ====
==============================
There are very nice ways to display git information. This is a short reference for these sorts of things. 
	$ git log -1
	$ git log --graph
	$ git log --oneline
	$ git reflog
	$ git revlist -g --all
	$ git show
	$ git status
	$ git log --graph --decorate --oneline --date=short		Show tree of commits, see git log documentation
	$ git diff --stat			Create a histogram showing insertions, deletions
	$ git diff --name-status	Only show names and changes, not diff output

